#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from pwnlib.tubes.remote import remote
from pwnlib import context
import sys
import random
import uuid
import hashlib
import json
import os
import base64
import traceback

context.log_level = 'error'

# base64 to number
def b2n(x):
  return int(base64.b64decode(x).encode('hex'), 16)

def solve_pow(challenge, prefix):
  resp = 0
  while True:
    if hashlib.sha256(prefix + str(resp)).hexdigest().startswith(challenge):
      return str(resp)
    resp += 1

def benign_001(ip, port):
  r = remote(ip, port)

  # 1. Generates a key
  r.sendlineafter('yellow-submarine$ ', 'keygen')
  r.recvuntil('Please solve the given proof-of-work challenge: ')
  challenge, prefix = r.recvuntil('.')[:-1].split('|')
  if len(challenge) != 4: raise Exception('Proof-of-work too hard')
  response = solve_pow(challenge, prefix)
  r.sendlineafter('> ', response)
  r.recvuntil('n = ')
  n = b2n(r.recvline())
  r.recvuntil('e = ')
  e = b2n(r.recvline())

  # 2. Stores a secret
  filename = str(uuid.uuid4())
  secret = base64.b64encode(os.urandom(32))
  r.sendlineafter('yellow-submarine$ ', 'store')
  r.sendlineafter('> ', filename)
  r.sendlineafter('> ', secret)
  r.recvline()
  token = r.recvline().strip()

  # 2b. Parses the token
  _, cmd_f, cmd_kf, sig_f, sig_kf = token.split('|')
  cmd_f, cmd_kf, sig_f, sig_kf = b2n(cmd_f), b2n(cmd_kf), b2n(sig_f), b2n(sig_kf)
  assert cmd_f == pow(sig_f, e, n)
  assert cmd_kf == pow(sig_kf, e, n)

  # 3. Exit
  r.sendlineafter('yellow-submarine$ ', 'exit')
  r.close()

def benign(ip, port):
  benign_fn = random.choice([
    benign_001
  ])
  benign_fn(ip, port)
  return {
    'error': 0,
    'error_msg': '',
    'payload': {}
  }

if __name__ == '__main__':
  try:
    print json.dumps(benign(sys.argv[1], int(sys.argv[2])))
  except Exception as e:
    response = {
      'error': 1,
      'error_msg': str(e) + "\n" + traceback.format_exc(),
      'payload': {}
    }
    print json.dumps(response)
